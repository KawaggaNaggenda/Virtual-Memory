#include <stdio.h>
#include <string.h>
#include <stdlib.h>

char *ltrim(char *s) {
	while (*s == ' ' || *s == '\t') s++;
	return s;
}

char getRegister(char *text) {
	if (*text == 'r' || *text=='R') text++;
	return atoi(text);
}

int assembleLine(char *text, unsigned char* bytes) {
	text = ltrim(text);
	char *keyWord = strtok(text," ");

	if (strcmp("add",keyWord) == 0) {
		bytes[0] = 0x10;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = getRegister(strtok(NULL," ")) << 4 | getRegister(strtok(NULL," "));
		return 2;
	}

	else if (strcmp("sub",keyWord) == 0) {
		bytes[0] = 0x50;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = getRegister(strtok(NULL," ")) << 4 | getRegister(strtok(NULL," "));
		return 2;
	}

	else if (strcmp("multiply",keyWord) == 0) {
		bytes[0] = 0x40;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = getRegister(strtok(NULL," ")) << 4 | getRegister(strtok(NULL," "));
		return 2;
	}

	else if (strcmp("divide",keyWord) == 0) {
		bytes[0] = 0x30;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = getRegister(strtok(NULL," ")) << 4 | getRegister(strtok(NULL," "));
		return 2;
	}

	else if (strcmp("return \r\n",keyWord) == 0) {
		bytes[0] = 0x70;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = 0x80;
		return 2;
	}	

	else if (strcmp("and",keyWord) == 0) {
		bytes[0] = 0x20;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = getRegister(strtok(NULL," ")) << 4 | getRegister(strtok(NULL," "));
		return 2;
	}	

	else if (strcmp("call",keyWord) == 0) {
		bytes[0] = 0xD0;
		bytes[2] = 0x00;
		bytes[3] = 0x00;
		int value = atoi(strtok(NULL, " "));
		if(value >= 0 && value <= 268435455)
		{
			int hexdigit;
			for(int i=3; i>=1; i--){
				hexdigit = value&15;
				bytes[i] =hexdigit;
				value =value>>4;
				hexdigit = value&15;
				bytes[i] =hexdigit;
				value =value>>4;
			}
			bytes[0] |= value&15;
		}
		return 4;
	}

	else if (strcmp("addimmediate",keyWord) == 0) {
		bytes[0] = 0x90;
		bytes[0] |= getRegister(strtok(NULL," "));
		int value = atoi(strtok(NULL," "));
			if(value<=225)
				bytes[1] = value;
			else
				bytes[1] = 0x00;
		return 2;
	}

	else if (strcmp("branchifequal",keyWord) == 0) {
		bytes[0] = 0xA0;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = getRegister(strtok(NULL," ")) << 4 | getRegister(strtok(NULL," "));
		bytes[2] = 0x00;
		bytes[3] = 0x00;
		int value = atoi(strtok(NULL, " "));
		if(value >= 0 && value <= 1048576)
		{
			int hexdigit; // value converted to hex
			for(int i = 3; i >= 1; i--){
				hexdigit = value&15;
				bytes[i] =hexdigit;
				value = value >> 4;
				hexdigit = value &15;
				bytes[i] = hexdigit;
				value = value >> 4;
			}
			bytes[0] |= value&15;
		}
		return 4;
	}

	else if (strcmp("branchifless",keyWord) == 0) {
		bytes[0] = 0xB0;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = getRegister(strtok(NULL," ")) << 4 | getRegister(strtok(NULL," "));
		bytes[2] = 0x00;
		bytes[3] = 0x00;
		int value = atoi(strtok(NULL, " "));
		if(value>=0&&value<=1048575)
		{
			int hexdigit;
			for(int i = 3; i >= 1; i--){
				hexdigit = value &15;
				bytes[i] = hexdigit;
				value = value >> 4;
				hexdigit = value &15;
				bytes[i] = hexdigit;
				value = value >> 4;
			}
			bytes[0] |= value&15;
		}
		return 4;
	}

	else if (strcmp("halt\r\n",keyWord) == 0) {
		bytes[0] = 0x00;
		bytes[1] = 0x00;
		return 2;
	}

	else if (strcmp("jump",keyWord) == 0) {
		bytes[0] = 0xC0;
		bytes[1] = 0x00;
		bytes[2] = 0x00;
		bytes[3] = 0x00;
		int value = atoi(strtok(NULL, " "));
		if(value>=0&&value<=268435455)
		{
			int hexdigit;
			for(int i=3; i>=1; i--){
				hexdigit = value&15;
				bytes[i] =hexdigit;
				value = value>>4;
				hexdigit = value&15;
				bytes[i] =hexdigit;
				value =value>>4;
			}
			bytes[0] |= value&15;
		}
		return 4;
	}		
	else if (strcmp("interrupt",keyWord) == 0) {
		// interrupt 0 : prints registers,  interrupt 1 : prints memory
		bytes[0] = 0x80;
		bytes[1] = 0x00;
		int value = atoi(strtok(NULL, " "));
		if(value==0 || value==1)
			bytes[1]= value;
		else
			bytes[1]= 2;
		return 2;
	}
	else if (strcmp("load",keyWord) == 0) {
		bytes[0] = 0xE0;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = getRegister(strtok(NULL," ")) << 4 | atoi(strtok(NULL," "));
		return 2;
	}
	else if (strcmp("store",keyWord) == 0) {
		bytes[0] = 0xF0;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = getRegister(strtok(NULL," ")) << 4 | atoi(strtok(NULL," "));
		return 2;
	}
	else if (strcmp("push",keyWord) == 0) {
		bytes[0] = 0x70;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = 0x80;
		return 2;
	}
	else if (strcmp("pop",keyWord) == 0) {
		bytes[0] = 0x70;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = 0x40;
		return 2;
	}
	else if (strcmp("or",keyWord) == 0) {
		bytes[0] = 0x60;
		bytes[0] |= getRegister(strtok(NULL," "));
		bytes[1] = getRegister(strtok(NULL," ")) << 4 | getRegister(strtok(NULL," "));
		return 2;
	}
	else {
		printf("Error: Instruction Invalid:   '%s' \n\n", keyWord);
	}

}


int main(int argc, char **argv) {
	FILE *src = fopen(argv[1],"r");
	FILE *dst = fopen(argv[2],"w");
	while (!feof(src)) {
		unsigned char bytes[4];
		char line[1000];
		if (NULL != fgets(line, 1000, src)) {
			printf ("read: %s\n",line);
			int byteCount = assembleLine(line,bytes);
			fwrite(bytes,byteCount,1,dst);
		}
	}
	fclose(src);
	fclose(dst);
	return 0;
}